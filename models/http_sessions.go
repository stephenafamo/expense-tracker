// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// HTTPSession is an object representing the database table.
type HTTPSession struct {
	ID         int        `boil:"id" json:"id" toml:"id" yaml:"id"`
	Key        null.Bytes `boil:"key" json:"key,omitempty" toml:"key" yaml:"key,omitempty"`
	Data       null.Bytes `boil:"data" json:"data,omitempty" toml:"data" yaml:"data,omitempty"`
	CreatedOn  null.Time  `boil:"created_on" json:"created_on,omitempty" toml:"created_on" yaml:"created_on,omitempty"`
	ModifiedOn null.Time  `boil:"modified_on" json:"modified_on,omitempty" toml:"modified_on" yaml:"modified_on,omitempty"`
	ExpiresOn  null.Time  `boil:"expires_on" json:"expires_on,omitempty" toml:"expires_on" yaml:"expires_on,omitempty"`

	R *httpSessionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L httpSessionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HTTPSessionColumns = struct {
	ID         string
	Key        string
	Data       string
	CreatedOn  string
	ModifiedOn string
	ExpiresOn  string
}{
	ID:         "id",
	Key:        "key",
	Data:       "data",
	CreatedOn:  "created_on",
	ModifiedOn: "modified_on",
	ExpiresOn:  "expires_on",
}

// HTTPSessionRels is where relationship names are stored.
var HTTPSessionRels = struct {
}{}

// httpSessionR is where relationships are stored.
type httpSessionR struct {
}

// NewStruct creates a new relationship struct
func (*httpSessionR) NewStruct() *httpSessionR {
	return &httpSessionR{}
}

// httpSessionL is where Load methods for each relationship are stored.
type httpSessionL struct{}

var (
	httpSessionColumns               = []string{"id", "key", "data", "created_on", "modified_on", "expires_on"}
	httpSessionColumnsWithoutDefault = []string{"key", "data", "modified_on", "expires_on"}
	httpSessionColumnsWithDefault    = []string{"id", "created_on"}
	httpSessionPrimaryKeyColumns     = []string{"id"}
)

type (
	// HTTPSessionSlice is an alias for a slice of pointers to HTTPSession.
	// This should generally be used opposed to []HTTPSession.
	HTTPSessionSlice []*HTTPSession
	// HTTPSessionHook is the signature for custom HTTPSession hook methods
	HTTPSessionHook func(context.Context, boil.ContextExecutor, *HTTPSession) error

	httpSessionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	httpSessionType                 = reflect.TypeOf(&HTTPSession{})
	httpSessionMapping              = queries.MakeStructMapping(httpSessionType)
	httpSessionPrimaryKeyMapping, _ = queries.BindMapping(httpSessionType, httpSessionMapping, httpSessionPrimaryKeyColumns)
	httpSessionInsertCacheMut       sync.RWMutex
	httpSessionInsertCache          = make(map[string]insertCache)
	httpSessionUpdateCacheMut       sync.RWMutex
	httpSessionUpdateCache          = make(map[string]updateCache)
	httpSessionUpsertCacheMut       sync.RWMutex
	httpSessionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var httpSessionBeforeInsertHooks []HTTPSessionHook
var httpSessionBeforeUpdateHooks []HTTPSessionHook
var httpSessionBeforeDeleteHooks []HTTPSessionHook
var httpSessionBeforeUpsertHooks []HTTPSessionHook

var httpSessionAfterInsertHooks []HTTPSessionHook
var httpSessionAfterSelectHooks []HTTPSessionHook
var httpSessionAfterUpdateHooks []HTTPSessionHook
var httpSessionAfterDeleteHooks []HTTPSessionHook
var httpSessionAfterUpsertHooks []HTTPSessionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HTTPSession) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range httpSessionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HTTPSession) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range httpSessionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HTTPSession) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range httpSessionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HTTPSession) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range httpSessionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HTTPSession) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range httpSessionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HTTPSession) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range httpSessionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HTTPSession) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range httpSessionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HTTPSession) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range httpSessionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HTTPSession) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range httpSessionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHTTPSessionHook registers your hook function for all future operations.
func AddHTTPSessionHook(hookPoint boil.HookPoint, httpSessionHook HTTPSessionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		httpSessionBeforeInsertHooks = append(httpSessionBeforeInsertHooks, httpSessionHook)
	case boil.BeforeUpdateHook:
		httpSessionBeforeUpdateHooks = append(httpSessionBeforeUpdateHooks, httpSessionHook)
	case boil.BeforeDeleteHook:
		httpSessionBeforeDeleteHooks = append(httpSessionBeforeDeleteHooks, httpSessionHook)
	case boil.BeforeUpsertHook:
		httpSessionBeforeUpsertHooks = append(httpSessionBeforeUpsertHooks, httpSessionHook)
	case boil.AfterInsertHook:
		httpSessionAfterInsertHooks = append(httpSessionAfterInsertHooks, httpSessionHook)
	case boil.AfterSelectHook:
		httpSessionAfterSelectHooks = append(httpSessionAfterSelectHooks, httpSessionHook)
	case boil.AfterUpdateHook:
		httpSessionAfterUpdateHooks = append(httpSessionAfterUpdateHooks, httpSessionHook)
	case boil.AfterDeleteHook:
		httpSessionAfterDeleteHooks = append(httpSessionAfterDeleteHooks, httpSessionHook)
	case boil.AfterUpsertHook:
		httpSessionAfterUpsertHooks = append(httpSessionAfterUpsertHooks, httpSessionHook)
	}
}

// One returns a single httpSession record from the query.
func (q httpSessionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*HTTPSession, error) {
	o := &HTTPSession{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for http_sessions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all HTTPSession records from the query.
func (q httpSessionQuery) All(ctx context.Context, exec boil.ContextExecutor) (HTTPSessionSlice, error) {
	var o []*HTTPSession

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to HTTPSession slice")
	}

	if len(httpSessionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all HTTPSession records in the query.
func (q httpSessionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count http_sessions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q httpSessionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if http_sessions exists")
	}

	return count > 0, nil
}

// HTTPSessions retrieves all the records using an executor.
func HTTPSessions(mods ...qm.QueryMod) httpSessionQuery {
	mods = append(mods, qm.From("\"http_sessions\""))
	return httpSessionQuery{NewQuery(mods...)}
}

// FindHTTPSession retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHTTPSession(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*HTTPSession, error) {
	httpSessionObj := &HTTPSession{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"http_sessions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, httpSessionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from http_sessions")
	}

	return httpSessionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HTTPSession) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no http_sessions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(httpSessionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	httpSessionInsertCacheMut.RLock()
	cache, cached := httpSessionInsertCache[key]
	httpSessionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			httpSessionColumns,
			httpSessionColumnsWithDefault,
			httpSessionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(httpSessionType, httpSessionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(httpSessionType, httpSessionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"http_sessions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"http_sessions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into http_sessions")
	}

	if !cached {
		httpSessionInsertCacheMut.Lock()
		httpSessionInsertCache[key] = cache
		httpSessionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the HTTPSession.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HTTPSession) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	httpSessionUpdateCacheMut.RLock()
	cache, cached := httpSessionUpdateCache[key]
	httpSessionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			httpSessionColumns,
			httpSessionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update http_sessions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"http_sessions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, httpSessionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(httpSessionType, httpSessionMapping, append(wl, httpSessionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update http_sessions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for http_sessions")
	}

	if !cached {
		httpSessionUpdateCacheMut.Lock()
		httpSessionUpdateCache[key] = cache
		httpSessionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q httpSessionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for http_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for http_sessions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HTTPSessionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), httpSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"http_sessions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, httpSessionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in httpSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all httpSession")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HTTPSession) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no http_sessions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(httpSessionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	httpSessionUpsertCacheMut.RLock()
	cache, cached := httpSessionUpsertCache[key]
	httpSessionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			httpSessionColumns,
			httpSessionColumnsWithDefault,
			httpSessionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			httpSessionColumns,
			httpSessionPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert http_sessions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(httpSessionPrimaryKeyColumns))
			copy(conflict, httpSessionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"http_sessions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(httpSessionType, httpSessionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(httpSessionType, httpSessionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert http_sessions")
	}

	if !cached {
		httpSessionUpsertCacheMut.Lock()
		httpSessionUpsertCache[key] = cache
		httpSessionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single HTTPSession record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HTTPSession) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no HTTPSession provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), httpSessionPrimaryKeyMapping)
	sql := "DELETE FROM \"http_sessions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from http_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for http_sessions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q httpSessionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no httpSessionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from http_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for http_sessions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HTTPSessionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no HTTPSession slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(httpSessionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), httpSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"http_sessions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, httpSessionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from httpSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for http_sessions")
	}

	if len(httpSessionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HTTPSession) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHTTPSession(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HTTPSessionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HTTPSessionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), httpSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"http_sessions\".* FROM \"http_sessions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, httpSessionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in HTTPSessionSlice")
	}

	*o = slice

	return nil
}

// HTTPSessionExists checks if the HTTPSession row exists.
func HTTPSessionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"http_sessions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if http_sessions exists")
	}

	return exists, nil
}
