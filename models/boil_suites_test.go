// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Categories", testCategories)
	t.Run("Transactions", testTransactions)
	t.Run("Types", testTypes)
}

func TestDelete(t *testing.T) {
	t.Run("Categories", testCategoriesDelete)
	t.Run("Transactions", testTransactionsDelete)
	t.Run("Types", testTypesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Categories", testCategoriesQueryDeleteAll)
	t.Run("Transactions", testTransactionsQueryDeleteAll)
	t.Run("Types", testTypesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Categories", testCategoriesSliceDeleteAll)
	t.Run("Transactions", testTransactionsSliceDeleteAll)
	t.Run("Types", testTypesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Categories", testCategoriesExists)
	t.Run("Transactions", testTransactionsExists)
	t.Run("Types", testTypesExists)
}

func TestFind(t *testing.T) {
	t.Run("Categories", testCategoriesFind)
	t.Run("Transactions", testTransactionsFind)
	t.Run("Types", testTypesFind)
}

func TestBind(t *testing.T) {
	t.Run("Categories", testCategoriesBind)
	t.Run("Transactions", testTransactionsBind)
	t.Run("Types", testTypesBind)
}

func TestOne(t *testing.T) {
	t.Run("Categories", testCategoriesOne)
	t.Run("Transactions", testTransactionsOne)
	t.Run("Types", testTypesOne)
}

func TestAll(t *testing.T) {
	t.Run("Categories", testCategoriesAll)
	t.Run("Transactions", testTransactionsAll)
	t.Run("Types", testTypesAll)
}

func TestCount(t *testing.T) {
	t.Run("Categories", testCategoriesCount)
	t.Run("Transactions", testTransactionsCount)
	t.Run("Types", testTypesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Categories", testCategoriesHooks)
	t.Run("Transactions", testTransactionsHooks)
	t.Run("Types", testTypesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Categories", testCategoriesInsert)
	t.Run("Categories", testCategoriesInsertWhitelist)
	t.Run("Transactions", testTransactionsInsert)
	t.Run("Transactions", testTransactionsInsertWhitelist)
	t.Run("Types", testTypesInsert)
	t.Run("Types", testTypesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("TransactionToTypeUsingType", testTransactionToOneTypeUsingType)
	t.Run("TransactionToCategoryUsingCategory", testTransactionToOneCategoryUsingCategory)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CategoryToTransactions", testCategoryToManyTransactions)
	t.Run("TypeToTransactions", testTypeToManyTransactions)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("TransactionToTypeUsingTransactions", testTransactionToOneSetOpTypeUsingType)
	t.Run("TransactionToCategoryUsingTransactions", testTransactionToOneSetOpCategoryUsingCategory)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("TransactionToTypeUsingTransactions", testTransactionToOneRemoveOpTypeUsingType)
	t.Run("TransactionToCategoryUsingTransactions", testTransactionToOneRemoveOpCategoryUsingCategory)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CategoryToTransactions", testCategoryToManyAddOpTransactions)
	t.Run("TypeToTransactions", testTypeToManyAddOpTransactions)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("CategoryToTransactions", testCategoryToManySetOpTransactions)
	t.Run("TypeToTransactions", testTypeToManySetOpTransactions)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("CategoryToTransactions", testCategoryToManyRemoveOpTransactions)
	t.Run("TypeToTransactions", testTypeToManyRemoveOpTransactions)
}

func TestReload(t *testing.T) {
	t.Run("Categories", testCategoriesReload)
	t.Run("Transactions", testTransactionsReload)
	t.Run("Types", testTypesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Categories", testCategoriesReloadAll)
	t.Run("Transactions", testTransactionsReloadAll)
	t.Run("Types", testTypesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Categories", testCategoriesSelect)
	t.Run("Transactions", testTransactionsSelect)
	t.Run("Types", testTypesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Categories", testCategoriesUpdate)
	t.Run("Transactions", testTransactionsUpdate)
	t.Run("Types", testTypesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Categories", testCategoriesSliceUpdateAll)
	t.Run("Transactions", testTransactionsSliceUpdateAll)
	t.Run("Types", testTypesSliceUpdateAll)
}
